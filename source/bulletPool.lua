class("BulletPool").extends()

BulletPool.pools = {} -- Stocke les pools de chaque type de bullet

-- ðŸ“Œ RÃ©cupÃ©rer une bullet depuis le pool
function BulletPool:get(bulletClass)
    local pool = self.pools[bulletClass]
    if pool and #pool > 0 then
        return table.remove(pool) -- ðŸ”¹ RÃ©cupÃ¨re une bullet existante
    end
    return nil -- ðŸ”¹ Aucun objet dispo dans le pool
end

-- ðŸ“Œ Ajouter une bullet au pool (quand elle est dÃ©sactivÃ©e)
function BulletPool:release(bullet)
    local bulletClass = bullet.__index -- ðŸ”¹ Identifie la classe de la bullet
    if not self.pools[bulletClass] then
        self.pools[bulletClass] = {} -- ðŸ”¹ CrÃ©er un pool s'il n'existe pas encore
    end
    bullet.active = false -- ðŸ”¹ DÃ©sactive la bullet
    bullet:remove() -- ðŸ”¹ La retire du moteur de rendu
    table.insert(self.pools[bulletClass], bullet) -- ðŸ”¹ Remet la bullet dans le pool
end

-- ðŸ“Œ Initialiser un pool avec des bullets prÃ©chargÃ©es
function BulletPool:preload(bulletClass, count, ...)
    if not self.pools[bulletClass] then
        self.pools[bulletClass] = {}
    end
    for i = 1, count do
        local bullet = bulletClass(...)
        bullet.active = false
        bullet:remove()
        table.insert(self.pools[bulletClass], bullet)
    end
end
